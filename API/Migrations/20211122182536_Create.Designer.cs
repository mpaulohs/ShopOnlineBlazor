// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopOnlinePWA.API.Migrations;

#nullable disable

namespace ShopOnlinePWA.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211122182536_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.AdditionalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TypeId");

                    b.ToTable("AdditionalInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.AdditionalInformationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("AddititonalInformationTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.CashDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("CashDesks", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ClientContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ClientContackInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ClientContactInformationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ClientContactInformationTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ClientContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ClientContracts", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Currencyes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.DocumentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentStatuses", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemCharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemQualityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemSerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("itemUnitMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemCharacteristicId");

                    b.HasIndex("ItemQualityId");

                    b.HasIndex("ItemSerieId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("itemUnitMeasurementId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItemCharacteristics", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItmeQualityes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItemSeries", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemUnitClassifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitClassifiers", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ItemUnitMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitMeasuraments", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Storages", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Subdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Subdivisions", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Documents.Adjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Adjustments", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Documents.Mesage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Mesages", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Documents.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Documents.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReciverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("documentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ReciverId");

                    b.HasIndex("documentStatusId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f9d926a-a0d0-45d9-9199-de095b014350"),
                            ConcurrencyStamp = "e901a5c4-abcc-45b4-9e21-b3b27f332ca1",
                            Description = "Administrators of application",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = new Guid("a025bcb3-de6e-44e7-8b8e-9f46c7c08ba0"),
                            ConcurrencyStamp = "1dc94c73-55e0-4f84-93c4-7f5410d4ecfe",
                            Description = "Managers of application",
                            Name = "Managers",
                            NormalizedName = "MANAGERS"
                        },
                        new
                        {
                            Id = new Guid("af994db9-ce5c-4e45-b23d-aca0f1102e7f"),
                            ConcurrencyStamp = "523d12fd-30d8-43db-82cc-e991b73b9e6c",
                            Description = "Clients of application",
                            Name = "Clients",
                            NormalizedName = "CLIENTS"
                        },
                        new
                        {
                            Id = new Guid("89859117-c9d5-4889-acea-c1fe285b47d1"),
                            ConcurrencyStamp = "242a7fe0-cefe-45a9-94f2-ddd320a2e061",
                            Description = "Public users of application",
                            Name = "Public",
                            NormalizedName = "PUBLIC"
                        });
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a55ab41b-a9e3-4cdd-8ca2-0d3175f56616"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22.11.2021 20:25:36",
                            Email = "Admitistrator@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Admitistrator@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMITISTRATOR@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "ADMITISTRATOR@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIx7BnfXs6YnB3n3c6FyRrd9oNf5dy18izz6PeY1vlo6L2kA3RWXFLG6fFku7pALHw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "22.11.2021 20:25:36",
                            TwoFactorEnabled = false,
                            UserName = "Admitistrator@ShopOnlinePWA.API.com"
                        },
                        new
                        {
                            Id = new Guid("a885af68-2dd3-4b86-a1c8-4733f95b5c0d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22.11.2021 20:25:36",
                            Email = "Manager@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Manager@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "MANAGER@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECO5hFJjbSi/nE3sTbRsktH07WICqiJRCCrLrxvxxjt1qKwfzU3T4iohu9ZTYNe8LQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "22.11.2021 20:25:36",
                            TwoFactorEnabled = false,
                            UserName = "Manager@ShopOnlinePWA.API.com"
                        },
                        new
                        {
                            Id = new Guid("c2fe3d0b-0913-43da-bb43-6c17ec05a475"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22.11.2021 20:25:36",
                            Email = "Client@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Client@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "CLIENT@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECeJIlrtHZG9Q0O8coFjnAJIWFyV9Yy50kuTlfGHcG3nFMlhvDas4TcPDQQ31JNAmQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "22.11.2021 20:25:36",
                            TwoFactorEnabled = false,
                            UserName = "Client@ShopOnlinePWA.API.com"
                        });
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.AdditionalInformation", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Catalogs.Item", null)
                        .WithMany("AdditionalInformations")
                        .HasForeignKey("ItemId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.AdditionalInformationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.BankAccount", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Catalogs.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.ClientContract", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Client");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Item", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ItemCharacteristic", "ItemCharacteristic")
                        .WithMany()
                        .HasForeignKey("ItemCharacteristicId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ItemQuality", "ItemQuality")
                        .WithMany()
                        .HasForeignKey("ItemQualityId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ItemSerie", "ItemSerie")
                        .WithMany()
                        .HasForeignKey("ItemSerieId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ItemUnitMeasurement", "itemUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("itemUnitMeasurementId");

                    b.Navigation("ItemCharacteristic");

                    b.Navigation("ItemQuality");

                    b.Navigation("ItemSerie");

                    b.Navigation("ItemType");

                    b.Navigation("itemUnitMeasurement");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Documents.Sale", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.ClientContract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId");

                    b.HasOne("ShopOnlinePWA.Library.Catalogs.DocumentStatus", "documentStatus")
                        .WithMany()
                        .HasForeignKey("documentStatusId");

                    b.Navigation("Client");

                    b.Navigation("Contract");

                    b.Navigation("Currency");

                    b.Navigation("Reciver");

                    b.Navigation("documentStatus");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.RoleClaim", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserClaim", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserLogin", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserRole", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.UserToken", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Identity.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Catalogs.Item", b =>
                {
                    b.Navigation("AdditionalInformations");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Identity.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
