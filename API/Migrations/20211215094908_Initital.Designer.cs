// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopOnlinePWA.API.Migrations;

#nullable disable

namespace ShopOnlinePWA.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211215094908_Initital")]
    partial class Initital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShopOnlinePWA.Library.AdditionalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.CashDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("CashDesks", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ClientContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContactInformationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientContactInformationTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientContackInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ClientContactInformationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientContactInformationTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ClientContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ClientContracts", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencyes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.DocumentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DocumentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DocumentCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DocumentCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MultiplicityMutalSettlements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentCurrencyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.DocumentSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DocumentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DocumentCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DocumentCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MultiplicityMutalSettlements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReciverAddres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReciverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReciverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentCurrencyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ReciverId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("StorageId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemCharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemQualityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemSerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemUnitMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCharacteristicId");

                    b.HasIndex("ItemQualityId");

                    b.HasIndex("ItemSerieId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ItemUnitMeasurementId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCharacteristics", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItmeQualityes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemSeries", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemUnitClassifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitClassifiers", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ItemUnitMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitMeasuraments", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Mesage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Mesages", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.PriceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceType");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b91d56bb-5dcb-4a8e-9dbd-f53c2a4a4a04"),
                            ConcurrencyStamp = "d46b89ab-0f13-4844-aaed-a6473aa1daf3",
                            Description = "Administrators of application",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = new Guid("878e3ad6-b021-46d9-984d-04df8585db47"),
                            ConcurrencyStamp = "361447d7-66dc-4e84-8b10-1c57d9a18bea",
                            Description = "Managers of application",
                            Name = "Managers",
                            NormalizedName = "MANAGERS"
                        },
                        new
                        {
                            Id = new Guid("65f518c4-94c6-48bf-a9d9-122b957ca69a"),
                            ConcurrencyStamp = "96a1a901-addc-451c-bbd5-0eae591fd208",
                            Description = "Clients of application",
                            Name = "Clients",
                            NormalizedName = "CLIENTS"
                        },
                        new
                        {
                            Id = new Guid("ff63a07c-c2c6-4348-af65-d450771927b6"),
                            ConcurrencyStamp = "8086a301-3986-43a3-b9b7-ed47922033de",
                            Description = "Public users of application",
                            Name = "Public",
                            NormalizedName = "PUBLIC"
                        });
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Storages", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Subdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Subdivisions", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d762c53-3a31-4a9f-9a67-93e549ed3b3e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15.12.2021 11:49:08",
                            Email = "Admitistrator@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Admitistrator@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMITISTRATOR@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "ADMITISTRATOR@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOWcx0jLtonfLrBad45fg/EGiERQBsRCIZ7pdacUsHh0HB9pTZMMF8ddzpMcsqoVrw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "15.12.2021 11:49:08",
                            TwoFactorEnabled = false,
                            UserName = "Admitistrator@ShopOnlinePWA.API.com"
                        },
                        new
                        {
                            Id = new Guid("6879c496-5769-442b-b844-166fb2e75b03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15.12.2021 11:49:08",
                            Email = "Manager@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Manager@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "MANAGER@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFM3fNnLfDTgOOTO1gfknnWfoFksTj1Nlyoq9Zxx++cBSu9J7xhfL9B25cUPwvJvlQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "15.12.2021 11:49:08",
                            TwoFactorEnabled = false,
                            UserName = "Manager@ShopOnlinePWA.API.com"
                        },
                        new
                        {
                            Id = new Guid("a2ae5c95-9550-416e-a6cc-c02c395a67cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15.12.2021 11:49:08",
                            Email = "Client@ShopOnlinePWA.API.com",
                            EmailConfirmed = true,
                            FirstName = "Client@ShopOnlinePWA.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@SHOPONLINEPWA.API.COM",
                            NormalizedUserName = "CLIENT@SHOPONLINEPWA.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBDowd7lFWoXzIUumMypVLSWTXb4XD1nwz7eU3+qHc4rsh3zBPVmP+7tKmGzI5O5hw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "15.12.2021 11:49:08",
                            TwoFactorEnabled = false,
                            UserName = "Client@ShopOnlinePWA.API.com"
                        });
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.BankAccount", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ClientContactInformation", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.ClientContactInformationType", "ClientContactInformationType")
                        .WithMany()
                        .HasForeignKey("ClientContactInformationTypeId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");

                    b.Navigation("ClientContactInformationType");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.ClientContract", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnlinePWA.Library.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Client");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.DocumentPayment", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.ClientContract", "ClientContract")
                        .WithMany()
                        .HasForeignKey("ClientContractId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnlinePWA.Library.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ShopOnlinePWA.Library.Currency", "DocumentCurrency")
                        .WithMany()
                        .HasForeignKey("DocumentCurrencyId");

                    b.HasOne("ShopOnlinePWA.Library.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ShopOnlinePWA.Library.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.HasOne("ShopOnlinePWA.Library.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId");

                    b.Navigation("Client");

                    b.Navigation("ClientContract");

                    b.Navigation("Currency");

                    b.Navigation("DocumentCurrency");

                    b.Navigation("Organization");

                    b.Navigation("PriceType");

                    b.Navigation("Responsible");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.DocumentSale", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.ClientContract", "ClientContract")
                        .WithMany()
                        .HasForeignKey("ClientContractId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnlinePWA.Library.Currency", "DocumentCurrency")
                        .WithMany()
                        .HasForeignKey("DocumentCurrencyId");

                    b.HasOne("ShopOnlinePWA.Library.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ShopOnlinePWA.Library.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId");

                    b.HasOne("ShopOnlinePWA.Library.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.HasOne("ShopOnlinePWA.Library.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("ShopOnlinePWA.Library.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId");

                    b.Navigation("Client");

                    b.Navigation("ClientContract");

                    b.Navigation("DocumentCurrency");

                    b.Navigation("Organization");

                    b.Navigation("PriceType");

                    b.Navigation("Reciver");

                    b.Navigation("Responsible");

                    b.Navigation("Storage");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Item", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.ItemCharacteristic", "ItemCharacteristic")
                        .WithMany()
                        .HasForeignKey("ItemCharacteristicId");

                    b.HasOne("ShopOnlinePWA.Library.ItemQuality", "ItemQuality")
                        .WithMany()
                        .HasForeignKey("ItemQualityId");

                    b.HasOne("ShopOnlinePWA.Library.ItemSerie", "ItemSerie")
                        .WithMany()
                        .HasForeignKey("ItemSerieId");

                    b.HasOne("ShopOnlinePWA.Library.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("ShopOnlinePWA.Library.ItemUnitMeasurement", "ItemUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("ItemUnitMeasurementId");

                    b.Navigation("ItemCharacteristic");

                    b.Navigation("ItemQuality");

                    b.Navigation("ItemSerie");

                    b.Navigation("ItemType");

                    b.Navigation("ItemUnitMeasurement");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.RoleClaim", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserClaim", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserLogin", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserRole", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopOnlinePWA.Library.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.UserToken", b =>
                {
                    b.HasOne("ShopOnlinePWA.Library.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShopOnlinePWA.Library.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
