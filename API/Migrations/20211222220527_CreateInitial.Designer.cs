// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopOnline.API.Models;

#nullable disable

namespace ShopOnline.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211222220527_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShopOnline.Library.AdditionalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdditionalInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.CashDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CashDesks", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ClientContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContactInformationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientContactInformationTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientContackInformations", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ClientContactInformationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClientContactInformationTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ClientContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ClientContracts", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencyes", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.DocumentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DocumentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DocumentCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DocumentCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MultiplicityMutalSettlements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentCurrencyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.DocumentSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DocumentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DocumentCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DocumentCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MultiplicityMutalSettlements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReciverAddres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReciverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReciverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentCurrencyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ReciverId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("StorageId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemCharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemQualityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemSerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemUnitMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ItemCharacteristicId");

                    b.HasIndex("ItemQualityId");

                    b.HasIndex("ItemSerieId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ItemUnitMeasurementId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemCharacteristics", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItmeQualityes", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemSeries", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemUnitClassifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitClassifiers", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.ItemUnitMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemUnitMeasuraments", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Mesage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Mesages", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.PriceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceType");
                });

            modelBuilder.Entity("ShopOnline.Library.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d3bb7d1-2405-480b-9900-fb037f35f553"),
                            ConcurrencyStamp = "c75e17c0-c6c9-4aed-9b2a-0a5fee7711e1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrators of application",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4006dfe-1566-4685-996f-babe13ad2b44"),
                            ConcurrencyStamp = "1b3ed4b3-582b-4f40-9835-2629f824997c",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Managers of application",
                            Name = "Managers",
                            NormalizedName = "MANAGERS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("732b6e8e-b651-490f-a2a9-d730991e3904"),
                            ConcurrencyStamp = "bc7644f7-47e4-45f6-9c4f-bd9f150c5eeb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Clients of application",
                            Name = "Clients",
                            NormalizedName = "CLIENTS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a6b3eb13-4acb-4cde-becf-8df64492b86c"),
                            ConcurrencyStamp = "0e1718d4-0025-419a-be4d-356a027d610e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Public users of application",
                            Name = "Public",
                            NormalizedName = "PUBLIC",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ShopOnline.Library.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Storages", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.Subdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subdivisions", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b861189-1354-4104-88d9-e611ac548004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23.12.2021 0:05:27",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admitistrator@ShopOnline.API.com",
                            EmailConfirmed = true,
                            FirstName = "Admitistrator@ShopOnline.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMITISTRATOR@ShopOnline.API.COM",
                            NormalizedUserName = "ADMITISTRATOR@ShopOnline.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKwRIewKyaLvaS2F9eYqhkMcD4BIJS2MSEpjzklSez/jVkl8G7Nz34agKGP2rIUbAg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "23.12.2021 0:05:27",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Admitistrator@ShopOnline.API.com"
                        },
                        new
                        {
                            Id = new Guid("88dcb55b-e9fc-43dc-9b08-a1963edd5243"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23.12.2021 0:05:27",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Manager@ShopOnline.API.com",
                            EmailConfirmed = true,
                            FirstName = "Manager@ShopOnline.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@ShopOnline.API.COM",
                            NormalizedUserName = "MANAGER@ShopOnline.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP9f7f+/JbSyKAI7p2WRClv9R3K3Gh7iSjepxlwUGNnV/LG/sixiRaTkXJUj78FVkQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "23.12.2021 0:05:27",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Manager@ShopOnline.API.com"
                        },
                        new
                        {
                            Id = new Guid("e2411384-2136-4371-b742-7415c09ee807"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23.12.2021 0:05:27",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Client@ShopOnline.API.com",
                            EmailConfirmed = true,
                            FirstName = "Client@ShopOnline.API.com",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@ShopOnline.API.COM",
                            NormalizedUserName = "CLIENT@ShopOnline.API.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvUhp+WBIUF+Hi776e0++x2jFWJGPdmEGKW3sRYzlJrX961kLXzW3TbjoKfLYBZ4Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "23.12.2021 0:05:27",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Client@ShopOnline.API.com"
                        });
                });

            modelBuilder.Entity("ShopOnline.Library.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ShopOnline.Library.BankAccount", b =>
                {
                    b.HasOne("ShopOnline.Library.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ShopOnline.Library.ClientContactInformation", b =>
                {
                    b.HasOne("ShopOnline.Library.ClientContactInformationType", "ClientContactInformationType")
                        .WithMany()
                        .HasForeignKey("ClientContactInformationTypeId");

                    b.HasOne("ShopOnline.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");

                    b.Navigation("ClientContactInformationType");
                });

            modelBuilder.Entity("ShopOnline.Library.ClientContract", b =>
                {
                    b.HasOne("ShopOnline.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnline.Library.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Client");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ShopOnline.Library.DocumentPayment", b =>
                {
                    b.HasOne("ShopOnline.Library.ClientContract", "ClientContract")
                        .WithMany()
                        .HasForeignKey("ClientContractId");

                    b.HasOne("ShopOnline.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnline.Library.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ShopOnline.Library.Currency", "DocumentCurrency")
                        .WithMany()
                        .HasForeignKey("DocumentCurrencyId");

                    b.HasOne("ShopOnline.Library.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ShopOnline.Library.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("ShopOnline.Library.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.HasOne("ShopOnline.Library.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId");

                    b.Navigation("Client");

                    b.Navigation("ClientContract");

                    b.Navigation("Currency");

                    b.Navigation("DocumentCurrency");

                    b.Navigation("Organization");

                    b.Navigation("PriceType");

                    b.Navigation("Responsible");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("ShopOnline.Library.DocumentSale", b =>
                {
                    b.HasOne("ShopOnline.Library.ClientContract", "ClientContract")
                        .WithMany()
                        .HasForeignKey("ClientContractId");

                    b.HasOne("ShopOnline.Library.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ShopOnline.Library.Currency", "DocumentCurrency")
                        .WithMany()
                        .HasForeignKey("DocumentCurrencyId");

                    b.HasOne("ShopOnline.Library.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ShopOnline.Library.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("ShopOnline.Library.User", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId");

                    b.HasOne("ShopOnline.Library.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.HasOne("ShopOnline.Library.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("ShopOnline.Library.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId");

                    b.Navigation("Client");

                    b.Navigation("ClientContract");

                    b.Navigation("DocumentCurrency");

                    b.Navigation("Organization");

                    b.Navigation("PriceType");

                    b.Navigation("Reciver");

                    b.Navigation("Responsible");

                    b.Navigation("Storage");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("ShopOnline.Library.Item", b =>
                {
                    b.HasOne("ShopOnline.Library.ItemCharacteristic", "ItemCharacteristic")
                        .WithMany()
                        .HasForeignKey("ItemCharacteristicId");

                    b.HasOne("ShopOnline.Library.ItemQuality", "ItemQuality")
                        .WithMany()
                        .HasForeignKey("ItemQualityId");

                    b.HasOne("ShopOnline.Library.ItemSerie", "ItemSerie")
                        .WithMany()
                        .HasForeignKey("ItemSerieId");

                    b.HasOne("ShopOnline.Library.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("ShopOnline.Library.ItemUnitMeasurement", "ItemUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("ItemUnitMeasurementId");

                    b.Navigation("ItemCharacteristic");

                    b.Navigation("ItemQuality");

                    b.Navigation("ItemSerie");

                    b.Navigation("ItemType");

                    b.Navigation("ItemUnitMeasurement");
                });

            modelBuilder.Entity("ShopOnline.Library.RoleClaim", b =>
                {
                    b.HasOne("ShopOnline.Library.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShopOnline.Library.UserClaim", b =>
                {
                    b.HasOne("ShopOnline.Library.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnline.Library.UserLogin", b =>
                {
                    b.HasOne("ShopOnline.Library.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnline.Library.UserRole", b =>
                {
                    b.HasOne("ShopOnline.Library.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopOnline.Library.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnline.Library.UserToken", b =>
                {
                    b.HasOne("ShopOnline.Library.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnline.Library.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShopOnline.Library.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
