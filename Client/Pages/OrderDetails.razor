@page "/orders/{id:guid}"

@inject IRepository<DocumentSale, Guid> repository

<PageTitle>Order</PageTitle>

<h1>Order detail</h1>

<p>This is the page off order detail</p>

@if (order == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var properties = typeof(DocumentSale).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
         .Where(ø => ø.CanRead && ø.CanWrite)
         //.Where(ø => ø.PropertyType == typeof(string))
         .Where(ø => ø.GetGetMethod(true).IsPublic);
    // .Where(ø => ø.GetSetMethod(true).IsPublic);


    @foreach (var property in properties)
    {
        <p>@property.Name: @property.GetValue(order)?.ToString()</p>
    }
}

@code {

    private DocumentSale order = null;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        order = await repository.GetByIdAsync(Id);
    }


}

