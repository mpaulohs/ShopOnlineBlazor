@page "/orders"
@inject HttpClient httpClient
@using ShopOnline.Library.Models.Documents
@using System.Reflection

<PageTitle>Orders</PageTitle>

<h1>Orders list</h1>

<p>This is the list off all orders</p>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var properties = typeof(DocumentSale).GetProperties(BindingFlags.Instance | BindingFlags.Public)
         .Where(ø => ø.CanRead && ø.CanWrite)
         //.Where(ø => ø.PropertyType == typeof(string))
         .Where(ø => ø.GetGetMethod(true).IsPublic);
    // .Where(ø => ø.GetSetMethod(true).IsPublic);

    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
               {
                   <th>@property.Name</th>
               }
            </tr>
        </thead>
      <tbody>
            @foreach (var order in orders)
            {
                <tr>
                     @foreach (var property in properties)
               {
                   <th>@property.GetValue(order)?.ToString()</th>
               }
                 </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<DocumentSale>? orders;

    protected override async Task OnInitializedAsync() {

        orders = await GetByFiltersAsync();

    }
    //protected override async Task OnInitializedAsync() => orders = await Http.GetFromJsonAsync<IEnumerable<DocumentSale>>("orders");

    public async Task<IEnumerable<DocumentSale>> GetByFiltersAsync(CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        string url = "https://localhost:5001/api/order";

        var request = new HttpRequestMessage(HttpMethod.Get, url);

        HttpResponseMessage responseMessage = await httpClient.SendAsync(request);

        if (responseMessage.IsSuccessStatusCode)
        {
            return await responseMessage.Content.ReadFromJsonAsync<IEnumerable<DocumentSale>>();
        }

        return null;

        }

}
