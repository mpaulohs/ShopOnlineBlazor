@page "/products/{id:guid}"

@inject IRepository<Product<Guid>,Guid> repository

<PageTitle>Product details...</PageTitle>

<h3>@Product?.FullName</h3>

@if (Product==null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="px-2 pt-2 position-relative">
            <img alt="@Product?.Name" src="@Product?.MainImageUrl" class="card-img-top w-60 mh-100" />
            <button class="btn btn-square btn-white rounded-circle position-relative top-0 end-0 transform scale-105-hover border-2 border-dark">
                <i class="bi bi-basket w-50 h-50"></i>
            </button>
        </div>
        <div class="card-body">
            <h3 class="card-title">@Product?.FullName</h3>
            <span class="d-block h3 mb-0">$399</span>
            <div>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.FullName</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductType</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductCharacteristic</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductQuality</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductSerie</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductUnitMeasurement</h4>
                <h4 class="text-base text-muted font-semibold mb-3">@Product.Description</h4>
            </div>
        </div>
    </div>

    <div class="card-footer">

        @foreach (var property in Properties)
        {
            <p>@property.Name: @property.GetValue(Product)?.ToString()</p>
        }
    </div>
}



@code {
    public Product<Guid>? Product = null;

    public Decimal? Price = null;



    public IEnumerable<System.Reflection.PropertyInfo>? Properties = null;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Product = await repository.GetByIdAsync(Id);

        Properties = typeof(Product<Guid>).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
        .Where(ø => ø.CanRead && ø.CanWrite)
        //.Where(ø => ø.PropertyType == typeof(string))
        .Where(ø => ø.GetGetMethod(true).IsPublic);
        // .Where(ø => ø.GetSetMethod(true).IsPublic);
    }

}
