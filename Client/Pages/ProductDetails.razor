@page "/Products/{id:guid}"

@inject IRepository<Product,Guid> repository

<PageTitle>Product details</PageTitle>

<h3>Product Details</h3>

@if (Product==null)
{
    <p><em>Loading...</em></p>
}

@if (true)
{
    <p><em>Next bolock...</em></p>





    <div class="col">
        <div class="card">
            <div class="px-2 pt-2 position-relative">
                <img alt=@Product.Name src="@Product.MainImageUrl" class="card-img">
                @*<img alt="..." src="https://images.unsplash.com/photo-1542291026-7eec264c27ff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&h=400&q=80" class="card-img">*@
                <button class="btn btn-square btn-white rounded-circle position-absolute top-6 end-6 transform scale-105-hover">
                    <i class="bi bi-basket"></i>
                </button>
            </div>
            <div class="card-body">
                <h3 class="text-base text-muted font-semibold mb-3">@Product.Name</h3>
                <div>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.FullName</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductType</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductCharacteristic</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductQuality</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductSerie</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.ProductUnitMeasurement</h4>
                    <h4 class="text-base text-muted font-semibold mb-3">@Product.Description</h4>
                </div>
                <span class="d-block h3 mb-0">$399</span>
            </div>
        </div>
    </div>





    @foreach (var property in Properties)
    {
        <p>@property.Name: @property.GetValue(Product)?.ToString()</p>
    }
}



@code {
    public Product? Product = null;

    public IEnumerable<System.Reflection.PropertyInfo>? Properties = null;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Product = await repository.GetByIdAsync(Id);

        Properties = typeof(Product).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
         .Where(ø => ø.CanRead && ø.CanWrite)
         //.Where(ø => ø.PropertyType == typeof(string))
         .Where(ø => ø.GetGetMethod(true).IsPublic);
        // .Where(ø => ø.GetSetMethod(true).IsPublic);
    }

}
