@page "/products"
@inject IRepository<Product<Guid>,Guid> Repository

<h3>ProductList</h3>

@if (products == null)
{
    <p>
        <em>
            Loading...

        </em>
    </p>
}
else
{
    var properties = typeof(Product<Guid>).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
         .Where(ø => ø.CanRead && ø.CanWrite)
         //.Where(ø => ø.PropertyType == typeof(string))
         .Where(ø => ø.GetGetMethod(true).IsPublic);
    // .Where(ø => ø.GetSetMethod(true).IsPublic);

    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    <th>@property.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        string tData = @property.GetValue(item)?.ToString();
                        if (property.Name == "Id")
                        {
                            <td>
                                <NavLink href=@($"products/{tData}")>@tData</NavLink>
                            </td>
                        }
                        else
                        {
                            <td>
                                @property.GetValue(item)?.ToString()
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>

}

@code {

    public IEnumerable<Product<Guid>> products { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        products = await Repository.GetByFiltersAsync();
    }

}
