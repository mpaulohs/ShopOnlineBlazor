@page "/products"

@inject IRepository<Product,Guid> Repository

<h3>ProductList</h3>

@if (products == null)
{
    <p>
        <em>
            Loading...

        </em>
    </p>
}
else
{
    var properties = typeof(Product).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
         .Where(ø => ø.CanRead && ø.CanWrite)
         //.Where(ø => ø.PropertyType == typeof(string))
         .Where(ø => ø.GetGetMethod(true).IsPublic);
    // .Where(ø => ø.GetSetMethod(true).IsPublic);

    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    <th>@property.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        string tData = @property.GetValue(item)?.ToString();
                        if (property.Name == "Id")
                        {
                            <td>
                                <NavLink href=@($"products/{tData}")>@tData</NavLink>
                            </td>
                        }
                        else
                        {
                            <td>
                                @property.GetValue(item)?.ToString()
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @for (var i = 1; i <= paginationPagesMetaData.TotalPages; i++)
            {
                if (i == paginationPagesMetaData.CurrentPage)
                {
                    <li @onclick="()=>OnSelectedPage(i)" style="cursor: pointer;" class="page-item">
                        <span class="page-link" style="background-color: blue" href="#">@i</span>
                    </li>
                }
                else
                {
                    <li @onclick="()=>OnSelectedPage(i)" style="cursor: pointer;" class="page-item">
                        <span class="page-link" href="#">i</span>
                    </li>
                }
            }
            <li style="cursor: pointer;" class="page-item">
                <input @bind-value=paginationPagesMetaData.PageSize>
                <span class="page-link" href="#">@paginationPagesMetaData.PageSize</span>
            </li>
            <li style="cursor: pointer;" class="page-item">
                <span class="page-link" href="#">@paginationPagesMetaData.CurrentPage</span>
            </li>
            <li style="cursor: pointer;" class="page-item">
                <span class="page-link" href="#">@paginationPagesMetaData.TotalPages</span>
            </li>

        </ul>

    </nav>

}

@code {

    public IEnumerable<Product> products { get; set; } = null;

    public PaginationEntitiesMetaData paginationEntitiesMetaData { get; set; } = null;

    public PaginationPagesMetaData paginationPagesMetaData { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        //ToDo update product value
        var response = await Repository.GetByFiltersAsync(limit: 10, offset: 0);
        products = response.Value.entities;
        paginationEntitiesMetaData = response.Value.paginationEntitiesMetaData;
        paginationPagesMetaData = PaginationPagesMetaData.ToPaginationPagesMetaData(paginationEntitiesMetaData);

    }

    public async Task OnSelectedPage(int selectdPage)
    {
        paginationPagesMetaData.CurrentPage = selectdPage;
        paginationEntitiesMetaData = PaginationEntitiesMetaData.ToPaginationEntitiesMetaData(paginationPagesMetaData);
        var response = await Repository.GetByFiltersAsync(limit: paginationEntitiesMetaData.Limit, offset: paginationEntitiesMetaData.Offset);
        products = response.Value.entities;
        paginationEntitiesMetaData = response.Value.paginationEntitiesMetaData;
        paginationPagesMetaData = PaginationPagesMetaData.ToPaginationPagesMetaData(paginationEntitiesMetaData);
    }

}
