@page "/orders"

@inject IRepository<DocumentSale, Guid> repository

<PageTitle>Orders</PageTitle>

<h1>Orders list</h1>

<p>This is the list off all orders</p>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var properties = typeof(DocumentSale).GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
         .Where(prop => prop.CanRead && prop.CanWrite)
         //.Where(prop => prop.PropertyType == typeof(string))
         .Where(prop => prop.GetGetMethod(true).IsPublic);
    // .Where(ø => ø.GetSetMethod(true).IsPublic);

    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    <th>@property.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in orders)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                       string tData = @property.GetValue(item)?.ToString();
                        if (property.Name == "Id")
                        {
                            <td>
                                <NavLink href=@($"orders/{tData}")>@tData</NavLink>
                            </td>
                        }
                        else
                        {
                            <td>
                                @property.GetValue(item)?.ToString()
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public IEnumerable<DocumentSale>? orders = null;

    protected override async Task OnInitializedAsync()
    {
        //ToDo update 
       // var res = await repository.GetByFiltersAsync();

    }

}


