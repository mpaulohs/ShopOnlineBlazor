@using Helpers.Pagination

@if (pagination != null)
{
    <nav aria-label="Page pagination">
    <ul class="pagination">
        <li @onclick="@(()=>OnSelectedPage(@pagination.CurentPage-1))" class=" page-item"><a class="page-link"
                aria-label="Previous"><span aria-hidden="true">&laquo;</span> </a></li>
        @for (int i = 1; i <= @pagination.TotalPages(); i++)
            {
                var row = i;
                <li @onclick="@(()=>OnSelectedPage(row))" class="page-item @(row==@pagination.CurentPage?"active":"")"><a
                class="page-link">@row</a></li>
            }
            <li @onclick="@(()=>OnSelectedPage(@pagination.CurentPage+1))" class="page-item"><a class="page-link"
                aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li>
        </ul>
    </nav>

}


@code {
    [Parameter]
    public Pagination pagination { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    @*
        public int totalPages { get; set; }
        public int curentPage { get; set; } *@

    @* protected override Task OnInitializedAsync()
        {
        totalPages = pagination.totalPages();
        curentPage = pagination.CurentPage;
        return base.OnInitializedAsync();
        } *@

    public async Task OnSelectedPage(int page)
    {
        if (pagination.CurentPage == page)
        {
            return;
        }
        // InvokeAsync(StateHasChanged);
        await OnPageSelected.InvokeAsync(page);
    }
}
