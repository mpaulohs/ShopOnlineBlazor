@using Helpers.Pagination

@if (pagination != null)
{
    <nav aria-label="Page pagination">
    <ul class="pagination">
        <li hidden="@pagination.HidePreviusButton()" @onclick="@(()=>OnChange(@pagination.CurentPage-1))"
            class=" page-item"><a class="page-link" aria-label="Previous"><span aria-hidden="true">&laquo;</span> </a>
        </li>
        @for (int i = 1; i <= @pagination.TotalPages(); i++)
            {
                var row = i;
                <li @onclick="@(()=>OnChange(row))" class="page-item @(row==@pagination.CurentPage?"active":"")"><a
                class="page-link">@row</a></li>
            }
            <li hidden="@pagination.HideNextButton()" @onclick="@(()=>OnChange(@pagination.CurentPage+1))"
            class="page-item"><a class="page-link" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>
            </li>
            <li class="page-item">
                <select class="dropdown-menu">
                    <option selected class="dropdown-item">10</option>
                    <option class="dropdown-item">20</option>
                    <option class="dropdown-item">50</option>
                    <option class="dropdown-item">100</option>
                </select>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public Pagination pagination { get; set; }
    [Parameter]
    public EventCallback<int> CalbackOnChange { get; set; }
    public async Task OnChange(int page)
    {
        if (pagination.CurentPage != page)
        {
            //pagination.CurentPage = page;
            await CalbackOnChange.InvokeAsync(page);
        }
    }
    int[] range = new[] { 5, 10, 20, 50 };
    void OnChangeTake(ChangeEventArgs e)
    {
        if (pagination.Take != (int)e.Value)
        {
            pagination.Take = (int)e.Value;
            pagination.CurentPage = 1;
            CalbackOnChange.InvokeAsync(1);
        }
    }
}
