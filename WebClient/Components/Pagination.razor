@using Client.Features

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @foreach (var link in this.links)
        {
            <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>


@code {
    [Parameter]
    public PaginationPagesMetaData? MetaData { get; set; }

    [Parameter]
    public int Spread { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<PagingLink>? links;

    protected override void OnParametersSet() => CreatePaginationLinks();

    private void CreatePaginationLinks()
    {
        links = new List<PagingLink>();

        if (MetaData.HasPrevious)
        {

            links.Add(new PagingLink(MetaData.CurrentPage - 1, MetaData.HasPrevious, "Privius"));
        }

        for (var i = 1; i <= MetaData.TotalPages; i++)
        {
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                links.Add(new PagingLink(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
            }
        }

        if (MetaData.HasNext)
        {

            links.Add(new PagingLink(MetaData.CurrentPage + 1, MetaData.HasNext, "Next"));
        }
    }

    private async Task OnSelectedPage(PagingLink _link)
    {
        if (_link.Page == MetaData?.CurrentPage || !_link.Enabled)
        {
            return;
        }

        MetaData.CurrentPage = _link.Page;
        await SelectedPage.InvokeAsync(_link.Page);
    }
    }