@page "/documents"
@using WebClient.Components
@using global::Shared.Models.Dtos
@using global::Shared.Models.Documents
@using WebClient.Helpers.Pagination
@using global::Shared.Services.Repository
@inject IRepository<DocumentSale<Guid>, Guid> _repository


<PageTitle>Products</PageTitle>
<h1>Documetns</h1>
<SearchComponent OnSearchCallback="@OnSearchChange"></SearchComponent>
@if (pagination != null && pagination?.TotalPages() > 1)
{
    <PaginationComponent pagination="@pagination" CalbackOnChange="@OnPaginationChange"></PaginationComponent>
}
@if (documents == default)
{
    <em>Loading...</em>
}
else
{
    <div class=".table-responsive">
    <table class="table table-hover">
        <caption>Documetns</caption>
        <thead class="thead-dark">
            <tr>
                <th scope="col">N</th>
                <th scope="col" class="hiden">Id</th>
                <th scope="col">Date</th>
                <th scope="col">Number</th>
                <th scope="col">Type</th>
                <th scope="col">Status</th>
                <th scope="col">Client</th>
                <th scope="col">Amount</th>
                <th scope="col">Currency</th>
                <th scope="col">Comment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var document in documents)
                {
                    <tr>
                        <td scope="row">@(++Num)</td>
                        <td class="hiden">@document.Id</td>
                        <td>@document.DateTime.ToString("yyyy-MM-dd")</td>
                        <td>@document.Number</td>
                        <td>@document.DocumentType</td>
                        <td>@document.DocumentStatus</td>
                        <td>@document.Client</td>
                        <td>@document.DocumentAmount</td>
                        <td>@document.DocumentCurrency</td>
                        <td>@document.Comment</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private IEnumerable<DocumentsListDTO<Guid>> documents { get; set; } = default;
    private Pagination pagination { get; set; } = new Pagination();
    private int Num { get; set; } = default;

    protected override async Task OnInitializedAsync()
    {
        await Update();
        await base.OnInitializedAsync();
    }
    private async Task Update(string search = default, string filter = default, string sorts = default, int take = default,
    int skip = default)
    {
        if (take == default)
        {
            take = pagination.Take;
        }
        if (skip == default)
        {
            skip = pagination.Skip;
        }
        var response = await _repository.GetAsync<DocumentsListDTO<Guid>>(search: search, filter: filter, sorts: sorts, take:
        take, skip: skip);
        this.documents = response.Item1;
        this.pagination = new Pagination(totalItems: response.Item2, skip: skip, take: take);
        this.Num = this.pagination.Skip;
    }
    private async Task OnSearchChange(string search)
    {
        await Update(search: search);
    }

    private async Task OnPaginationChange()
    {
        await Update();
    }
}