@page "/products"
@using WebClient.Helpers.Pagination
@using WebClient.Components
@using global::Shared.Models.Dtos
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository
@inject IRepository<Product<Guid>,Guid> repository

<PageTitle>Products</PageTitle>

<h1>Products</h1>
<p>Product list</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>N</th>
            <th>Article</th>
            <th>Name</th>
            <th>Full name</th>
            <th>Description</th>
            <th>Image</th>
        </tr>
    </thead>
    <tbody>
            @for (int i = pagination.Skip; i <(pagination.Skip + pagination.Take); i++)
            {
                <tr>
                    <td>@((i+1).ToString())</td>
                    <td>@(products.ElementAtOrDefault(i)?.Article)</td>
                    <td>@(products.ElementAtOrDefault(i)?.Name)</td>
                    <td>@(products.ElementAtOrDefault(i)?.FullName)</td>
                    <td>@(products.ElementAtOrDefault(i)?.Description)</td>
                    <td>@(products.ElementAtOrDefault(i)?.MainImageUrl)</td>
                </tr>
            }
        </tbody>
    </table>
 @if (true)
    {
        <CPagination pagination="@pagination" OnPageSelected="@OnPageSelected"></CPagination>
    }
}
@code {
    private IEnumerable<ProductDTO<Guid>> products { get; set; } = null;
    public Pagination pagination { get; set; } = new Pagination();

    protected override async Task OnInitializedAsync()
    {
        var result = await GetProducts();
        products = result.Item1;
        var count = result.Item2;
        pagination.Count = count;
    }
    public async Task<(IEnumerable<ProductDTO<Guid>>,int)> GetProducts()
    {
        string search = default;
        string filter = default;
        string sorts = default;
        int take = pagination.Take;
        int skip = pagination.Skip;
        return await repository.GetAsync<ProductDTO<Guid>>(search, filter, sorts, take, skip);
    }

    public async Task OnPageSelected(int page){
        //InvokeAsync(StateHasChanged);
        pagination.CurentPage = page;
        var result = await GetProducts();
        products = result.Item1;
        var count = result.Item2;
        pagination.Count = count;
        //InvokeAsync(() =>StateHasChanged());
    }
}
