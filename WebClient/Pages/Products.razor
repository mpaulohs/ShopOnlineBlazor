@page "/products"
@using global::Shared.Models.Dtos
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository;
@inject IRepository<Product<Guid>,Guid> Repository

<h3>Products</h3>

@if (ProductsList == null)
{
        <p><em>Loading...</em></p>
}
else
{
    @*<table class="table">
        <thead>
            <tr>
                <th>N</th>
                <th>Article</th>
                <th>Name</th>
                <th>FullName</th>
                <th>Description</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i < tottalItems; i++)
                {
                            <tr>
                                <td>@i.ToString()</td>
                                <td>@(ProductsList.ElementAtOrDefault(i)?.Article)</td>
                                <td>@(ProductsList.ElementAtOrDefault(i)?.Name)</td>
                                <td>@(ProductsList.ElementAtOrDefault(i)?.FullName)</td>
                                <td>@(ProductsList.ElementAtOrDefault(i)?.Description)</td>
                                <td>@(ProductsList.ElementAtOrDefault(i)?.MainImageUrl)</td>
                            </tr>
                }
        </tbody>
    </table>*@
}
   

@code {
    public IEnumerable<ProductDTO<Guid>> ProductsList { get; set; } = null;     
    public  int pageCurrent = 1;
    public int pageSize = 25;
    public int tottalItems = 1;
    protected override Task OnInitializedAsync()
    {
        GetProducts();
        return null;
    }
    public async Task GetProducts()
    {
        string search = default;
        string filter = default;
        string sorts = default;
        int take = default;
        int skip = default;
        ProductsList = await Repository.GetAsync<ProductDTO<Guid>>(search, filter,sorts, take, skip);
        tottalItems = ProductsList.Count();
    }
}
