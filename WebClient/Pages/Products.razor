@page "/products"
@using WebClient.Helpers.Pagination
@using WebClient.Components
@using global::Shared.Models.Dtos
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository
@inject IRepository<Product<Guid>,Guid> repository

<PageTitle>Products</PageTitle>

<h1>Products</h1>
<p>Product list</p>
    @if (pagination != null && pagination.TotalPages() > 1)
    {
        <CPagination pagination="@pagination" CalbackOnChange="@OnPageSelected"></CPagination>
    }
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>N</th>
            <th>Article</th>
            <th>Name</th>
            <th>Full name</th>
            <th>Description</th>
            <th>Image</th>
        </tr>
    </thead>
    <tbody>
        @for ((int e, int num) = (0, pagination.Skip + 1); (e < pagination.Take&&num<=pagination.TotalItems); e++, num++)
            {
                <tr>
                    <td>@((num).ToString())</td>
                    <td>@(products.ElementAtOrDefault(e)?.Article)</td>
                    <td>@(products.ElementAtOrDefault(e)?.Name)</td>
                    <td>@(products.ElementAtOrDefault(e)?.FullName)</td>
                    <td>@(products.ElementAtOrDefault(e)?.Description)</td>
                    <td>@(products.ElementAtOrDefault(e)?.MainImageUrl)</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private IEnumerable<ProductDTO<Guid>>? products { get; set; } = null;
    public Pagination? pagination { get; set; } = new Pagination();
    public string Search { get; set; } = default;
    public string Filter { get; set; } = default;
    public string Sorts { get; set; } = default;
    protected override async Task OnInitializedAsync()
    {
        await Update();
    }
    public async Task Update(int take = default, int curentPage = default)
    {
        if (take == default)
        {
            take = pagination.Take;
        }
        int skip = curentPage == default ? 0 : take * (curentPage - 1);
        var request = await repository.GetAsync<ProductDTO<Guid>>(Search, Filter, Sorts, take: take, skip: skip);
        products = request.Item1;
        pagination = new Pagination(request.Item2, skip, take);
    }

    public async Task OnPageSelected(int curentPage)
    {
        await Update(curentPage: curentPage);
        //InvokeAsync(() => StateHasChanged());
    }
}
