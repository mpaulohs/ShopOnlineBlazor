@page "/products"
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository;
@inject IRepository<Product,Guid> Repository

<h3>Products</h3>

@if (ProductsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
@for (int i = 1; i < @ProductsList.Count<Product>(); i++)
{

    <tr>
        <td>@i.ToString()</td>
        <td>@(ProductsList.ElementAt<@Product>(i).Id.ToString())</td>
        <td>@(ProductsList.ElementAt<@Product>(i).Article.ToString())</td>
        <td>@(ProductsList.ElementAt<@Product>(i).Name.ToString())</td>
        <td>@(ProductsList.ElementAt<@Product>(i).FullName.ToString())</td>
        <td>@(ProductsList.ElementAt<@Product>(i).CreatedAt.ToString())</td>
        <td>@(ProductsList.ElementAt<@Product>(i).UpdatedAt.ToString())</td>
    </tr>
}
}




@code {
    public IEnumerable<Product> ProductsList { get; set; }

    private int pageCurrent = 1;

    private int pageSize = 25;

    private int tottalItems = 1;


    protected override Task OnInitializedAsync()
    {
        GetProducts();
        return null;
    }

    private async Task GetProducts()
    {
        var sorts = "name";
        ProductsList = await Repository.GetAsync(sorts: sorts, pageSize: pageSize, pageCurrent: pageCurrent);
    }
}
