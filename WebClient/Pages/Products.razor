@page "/products"
@using global::Shared.Models.Dtos
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository;
@inject IRepository<Product<Guid>,Guid> Repository

<h3>Products</h3>

@if (ProductsList == null)
{
        <p><em>Loading...</em></p>
}
else
{
    @for (int i = 1; i < @ProductsList.Count<ProductDTO<Guid>>(); i++)
    {

                <tr>
                    <td>@i.ToString()</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).Id.ToString())</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).Name.ToString())</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).FullName.ToString())</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).CreatedAt.ToString())</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).UpdatedAt.ToString())</td>
                    <td>@(ProductsList.ElementAt<@ProductDTO<Guid>>(i).Article.ToString())</td>
                </tr>
    }
}




@code {
    public IEnumerable<ProductDTO<Guid>> ProductsList { get; set; } = null;

    private int pageCurrent = 1;

    private int pageSize = 25;

    private int tottalItems = 1;


    protected override Task OnInitializedAsync()
    {
        GetProducts();
        return null;
    }

    private async Task GetProducts()
    {
        string search = default;
        string filter = default;
        string sorts = default;
        int take = default;
        int skip = default;
        ProductsList = await Repository.GetAsync<ProductDTO<Guid>>(search, filter,sorts, take, skip);
    }
}
