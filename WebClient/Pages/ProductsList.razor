@page "/products"
@using WebClient.Components
@using WebClient.Helpers.Pagination
@using dto=global::Shared.Models.Dtos
@using global::Shared.Models.Catalogs
@using global::Shared.Services.Repository
@inject IRepository<Product<Guid>,Guid> _repository

<PageTitle>Products</PageTitle>
<h1>Products</h1>
<SearchComponent OnSearchCallback="@OnSearchChange"></SearchComponent>
@if (pagination != null && pagination?.TotalPages() > 1)
{
    <PaginationComponent pagination="@pagination" CalbackOnChange="@OnPaginationChange"></PaginationComponent>
}
@if (products != default)
{
    <ProductListComponent pagination="@pagination" productList="@products"></ProductListComponent>
}
@code {
    private IEnumerable<dto.ProductDTO<Guid>>? products { get; set; } = default;
    private Pagination? pagination { get; set; } = new Pagination();
    protected override async Task OnInitializedAsync()
    {
        await Update();
    }
    public async Task Update(string search = default, string filter = default, string sorts = default, int take = default,
    int skip = default)
    {
        if (take == default)
        {
            take = pagination.Take;
        }
        if (skip == default)
        {
            skip = pagination.Skip;
        }
        var response = await _repository.GetAsync<dto.ProductDTO<Guid>>(search: search, filter: filter, sorts: sorts, take: take,
        skip: skip);
        products = response.Item1;
        pagination = new Pagination(totalItems: response.Item2, skip: skip, take: take);
    }
    public async Task OnSearchChange(string search)
    {
        await Update(search: search);
    }

    public async Task OnPaginationChange()
    {
        await Update();
    }
}
